}
cholV_2 <- tryCatch( chol(V), error = function(err) {
correlation_nudged_again <- round(correlation, 2) + .001
cormatrix <- Z %*% (correlation_nudged_again *t(Z))
diag(cormatrix) <- 1
X <- design[o, , drop = FALSE]
V <- cormatrix[o, o]
if (!is.null(weights)) {
wrs <- 1/sqrt(drop(weights[i, o]))
V <- wrs * t(wrs * t(V))
}
return(chol(V))
})
} )
y <- backsolve(cholV, y, transpose = TRUE)
if (all(X == 0)) {
df.residual[i] <- n
sigma[i] <- sqrt(array(1/n, c(1, n)) %*% y^2)
} else {
X <- backsolve(cholV, X, transpose = TRUE)
out <- lm.fit(X, y)
est <- !is.na(out$coefficients)
beta[i, ] <- out$coefficients
stdev.unscaled[i, est] <- sqrt(diag(chol2inv(out$qr$qr,
size = out$rank)))
df.residual[i] <- out$df.residual
if (df.residual[i] > 0)
sigma[i] <- sqrt(array(1/out$df.residual, c(1,
n)) %*% out$residuals^2)
}
}
}
cholV <- chol(cormatrix)
QR <- qr(backsolve(cholV, design_gene, transpose = TRUE))
cov.coef <- chol2inv(QR$qr, size = QR$rank)
est <- QR$pivot[1:QR$rank]
dimnames(cov.coef) <- list(coef.names[est], coef.names[est])
list(coefficients = beta, stdev.unscaled = stdev.unscaled,
sigma = sigma, df.residual = df.residual, ndups = ndups,
spacing = spacing, block = block, correlation = correlation,
cov.coefficients = cov.coef, pivot = QR$pivot, rank = QR$rank,
design = design)
}
glsRes <- gls.series_multiple_designs(M = PhosProtGel[ ,ii_peptide ],
cov_matrix = randomPhosProtGel,
design = designMatrix,
ndups = 1,
spacing = 1,
block = droplevels(metaData[ii_peptide, ]$biorep),
correlation = corrsPhosProtGel_mean)
correlation
i = 3257
design_gene <- cbind(design, unlist(cov_matrix[i,]))
y <- drop(M[i, ])
o <- is.finite(y)
y <- y[o]
n <- length(y)
n
X <- design_gene[o, , drop = FALSE]
V <- cormatrix[o, o]
if (!is.null(weights)) {
wrs <- 1/sqrt(drop(weights[i, o]))
V <- wrs * t(wrs * t(V))
}
V
#' limma gls.series adapted for varying covariates across genes
#'
#' This function tests for divergence between two species
#' in one molecular phenotype at a time. The current version is tuned
#' for Brett's diffphos analysis.
#'
#' @param M Matrix of gene by sample.
#' @param cov_matrix Matrix of gene specific covariate information (gene by sample).
#' @param design Model matrix, the part that is fixed across genes, indepenent of cov_matrix.
#'
#' @keywords Humanzee
#'
#' @export
#' @examples
#' M <- phos_data
#' cov_matrix <- protein_pheno_data
#' individual <- as.numeric(str_extract(colnames(phos_data), "[0-9]+"))
#' design <- model.matrix(~ 1 + as.factor(individual))
#' block <- block
#' correlation <- mrho
#' ndups = 1; weights = NULL; spacing = 1
gls.series_multiple_designs <- function (M,
cov_matrix = NULL, design = NULL, ndups = 1,
spacing = 1, block = NULL,
correlation = NULL, weights = NULL, ...) {
M <- as.matrix(M)
# narrays: number of samples
narrays <- ncol(M)
if (is.null(design))
design <- matrix(1, narrays, 1)
design <- as.matrix(design)
if (nrow(design) != narrays)
stop("Number of rows of design matrix does not match number of arrays")
#    if (is.null(correlation))
#        correlation <- duplicateCorrelation(M, design = design,
#                                            ndups = ndups, spacing = spacing, block = block,
#                                            weights = weights, ...)$consensus.correlation
if (!is.null(weights)) {
weights[is.na(weights)] <- 0
weights <- asMatrixWeights(weights, dim(M))
M[weights < 1e-15] <- NA
weights[weights < 1e-15] <- NA
}
if (!is.null(cov_matrix)) {
nbeta <- ncol(design) + 1
coef.names <- c(colnames(design), "cov")
} else {
nbeta <- ncol(design)
coef.names <- colnames(design)
}
if (is.null(block)) {
if (ndups < 2) {
warning("No duplicates: correlation between duplicates set to zero")
ndups <- 1
correlation <- 0
}
if (is.null(spacing))
spacing <- 1
cormatrix <- diag(rep(correlation, len = narrays), nrow = narrays,
ncol = narrays) %x% array(1, c(ndups, ndups))
M <- unwrapdups(M, ndups = ndups, spacing = spacing)
if (!is.null(weights))
weights <- unwrapdups(weights, ndups = ndups, spacing = spacing)
#         design <- design %x% rep(1, ndups)
#         colnames(design) <- coef.names
} else {
if (ndups > 1) {
stop("Cannot specify ndups>2 and non-null block argument")
}
else {
ndups <- spacing <- 1
}
block <- as.vector(block)
if (length(block) != narrays)
stop("Length of block does not match number of arrays")
ub <- unique(block)
nblocks <- length(ub)
Z <- matrix(block, narrays, nblocks) == matrix(ub, narrays,
nblocks, byrow = TRUE)
cormatrix <- Z %*% (correlation * t(Z))
}
diag(cormatrix) <- 1
ngenes <- nrow(M)
stdev.unscaled <- matrix(NA, ngenes, nbeta,
dimnames = list(rownames(M),
coef.names))
beta <- stdev.unscaled
sigma <- rep(NA, ngenes)
df.residual <- rep(0, ngenes)
for (i in 1:ngenes) {
print(i)
design_gene <- cbind(design, unlist(cov_matrix[i,]))
y <- drop(M[i, ])
o <- is.finite(y)
y <- y[o]
n <- length(y)
if (n > 0) {
X <- design_gene[o, , drop = FALSE]
V <- cormatrix[o, o]
if (!is.null(weights)) {
wrs <- 1/sqrt(drop(weights[i, o]))
V <- wrs * t(wrs * t(V))
}
cholV <- chol(V)
y <- backsolve(cholV, y, transpose = TRUE)
if (all(X == 0)) {
df.residual[i] <- n
sigma[i] <- sqrt(array(1/n, c(1, n)) %*% y^2)
} else {
X <- backsolve(cholV, X, transpose = TRUE)
out <- lm.fit(X, y)
est <- !is.na(out$coefficients)
beta[i, ] <- out$coefficients
stdev.unscaled[i, est] <- sqrt(diag(chol2inv(out$qr$qr,
size = out$rank)))
df.residual[i] <- out$df.residual
if (df.residual[i] > 0)
sigma[i] <- sqrt(array(1/out$df.residual, c(1,
n)) %*% out$residuals^2)
}
}
}
cholV <- chol(cormatrix)
QR <- qr(backsolve(cholV, design_gene, transpose = TRUE))
cov.coef <- chol2inv(QR$qr, size = QR$rank)
est <- QR$pivot[1:QR$rank]
dimnames(cov.coef) <- list(coef.names[est], coef.names[est])
list(coefficients = beta, stdev.unscaled = stdev.unscaled,
sigma = sigma, df.residual = df.residual, ndups = ndups,
spacing = spacing, block = block, correlation = correlation,
cov.coefficients = cov.coef, pivot = QR$pivot, rank = QR$rank,
design = design)
}
corrsPhosProtGel_mean <- mean(corrsPhosProtGel, na.rm = TRUE) - runif(1, 0, 10^(-6))
corrsPhosProtGel_mean
summary(corrsPhosProtGel_mean)
corrsPhosProtGel <- sapply(1:nrow(PhosProtGel), function(per_peptide) {
# Make a data matrix for peptide i information
per_phenoData <- cbind(metaData[ metaData$dataType == "peptide", ],
peptide = PhosProtGel[per_peptide,
metaData$dataType == "peptide"],
phosgel = randomPhosProtGel[per_peptide, ])
designMatrix <- model.matrix(~ 0 + individual + phosgel,
data = per_phenoData)
block <- droplevels(per_phenoData$biorep)
yy <- per_phenoData$peptide
mixedModel2Fit_multiple_design(design = designMatrix, block = block, yy = yy)
})
corrsPhosProtGel_mean <- mean(corrsPhosProtGel, na.rm = TRUE) - runif(1, 0, 10^(-6))
summary(corrsPhosProtGel)
mean(corrsPhosProtGel, na.rm = TRUE)
corrsPhosProtGel_mean <- mean(corrsPhosProtGel, na.rm = TRUE)
# Per gene limma mixed model
designMatrix <- model.matrix(~ 0 + individual, data = metaData_peptide )
glsRes <- gls.series_multiple_designs(M = PhosProtGel[ ,ii_peptide ],
cov_matrix = randomPhosProtGel,
design = designMatrix,
ndups = 1,
spacing = 1,
block = droplevels(metaData[ii_peptide, ]$biorep),
correlation = corrsPhosProtGel_mean)
# Contrast test
designMatrixCov <- model.matrix(~ 0 + individual + pseudoCov,
data = data.frame(metaData_peptide, pseudoCov = runif(12) ) )
contrastMatrix <- makeContrasts(individualHL18862 - individualHL18486, individualHL19160 - individualHL18862,
individualHL19160 - individualHL18486,
levels = designMatrixCov)
rownames(contrastMatrix) <- colnames(glsRes$coefficients)
fit2 <- contrasts.fit(glsRes, contrastMatrix)
GelPrepCovFit <- eBayes(fit2)
saveRDS(GelPrepCovFit, file = "~/Dropbox/Brett/diffphos-batch-covariate/GelPrepCovFit")
datadir <- "~/Dropbox/GitHub/Phospilot/diffphos-data"
GelPrep <- readRDS( file.path(datadir, "GelPrep.rds") )
phosdata <- readRDS( file.path(datadir, "medianSub.quantiled.rds") )
rm(list=ls())
datadir <- "~/Dropbox/GitHub/Phospilot/diffphos-data"
GelPrep <- readRDS( file.path(datadir, "GelPrep.rds") )
# GelPrep and batch as covariate
# Use median substracted and quantile normalized phosdata
phosdata <- readRDS( file.path(datadir, "medianSub.quantiled.rds") )
### PREPARE DATA
colnames(GelPrep) <- c("HL18862", "HL18486", "HL19160")
PhosProtGel <- merge(phosdata, GelPrep, by = "row.names",
suffixes = c("_peptide", "_GelPrep") ) #3257 observations
rownames(PhosProtGel) <- PhosProtGel$Row.names
PhosProtGel <- PhosProtGel[ , -1]
PhosProtGel <- as.matrix(PhosProtGel)
# Make meta data matrix
sampleLabels <- strsplit( colnames(PhosProtGel)[1:12], split = "_", fixed = FALSE)
metaData <- data.frame(individual = as.factor(sapply(sampleLabels, "[[", 1)),
biorep = as.factor(sapply(sampleLabels, "[[", 2)),
techrep = as.factor(sapply(sampleLabels, "[[", 3)) )
metaData <- rbind(metaData,
data.frame(individual = colnames(PhosProtGel)[13:15],
biorep = "NA",
techrep = "NA") )
metaData$dataType <- c(rep("peptide", 12), rep("GelPrep", 3) )
metaData$label <- with(metaData, paste(individual, biorep, techrep, sep = "_"))
### FIT A LINEAR MODEL FOR ONE PEPTIDE AT A TIME
# First, add random perturbation to the covariate matrix
ii_phosprotgel <- metaData$dataType == "GelPrep"
randomPhosProtGel <- PhosProtGel[ , ii_phosprotgel]
ii_peptide <- metaData$dataType == "peptide"
metaData_peptide <- metaData[ ii_peptide, ]
order_phosgel <- match(metaData_peptide$individual, colnames(randomPhosProtGel) )
randomPhosProtGel <- randomPhosProtGel[, order_phosgel]
randomPhosProtGel <- randomPhosProtGel +
matrix( runif( NROW(randomPhosProtGel) * NCOL(randomPhosProtGel),
0, 10^(-6)),
nrow(randomPhosProtGel))
datadir <- "~/Dropbox/GitHub/Phospilot/diffphos-data"
GelPrep <- readRDS( file.path(datadir, "GelPrep.rds") )
# GelPrep and batch as covariate
# Use median substracted and quantile normalized phosdata
phosdata <- readRDS( file.path(datadir, "medianSub.quantiled.rds") )
### PREPARE DATA
colnames(GelPrep) <- c("HL18862", "HL18486", "HL19160")
PhosProtGel <- merge(phosdata, GelPrep, by = "row.names",
suffixes = c("_peptide", "_GelPrep") ) #3257 observations
rownames(PhosProtGel) <- PhosProtGel$Row.names
PhosProtGel <- PhosProtGel[ , -1]
PhosProtGel <- as.matrix(PhosProtGel)
# Make meta data matrix
sampleLabels <- strsplit( colnames(PhosProtGel)[1:12], split = "_", fixed = FALSE)
metaData <- data.frame(individual = as.factor(sapply(sampleLabels, "[[", 1)),
biorep = as.factor(sapply(sampleLabels, "[[", 2)),
techrep = as.factor(sapply(sampleLabels, "[[", 3)) )
metaData <- rbind(metaData,
data.frame(individual = colnames(PhosProtGel)[13:15],
biorep = "NA",
techrep = "NA") )
metaData$dataType <- c(rep("peptide", 12), rep("GelPrep", 3) )
metaData$label <- with(metaData, paste(individual, biorep, techrep, sep = "_"))
# First, add random perturbation to the covariate matrix
ii_phosprotgel <- metaData$dataType == "GelPrep"
randomPhosProtGel <- PhosProtGel[ , ii_phosprotgel]
ii_peptide <- metaData$dataType == "peptide"
metaData_peptide <- metaData[ ii_peptide, ]
order_phosgel <- match(metaData_peptide$individual, colnames(randomPhosProtGel) )
randomPhosProtGel <- randomPhosProtGel[, order_phosgel]
randomPhosProtGel <- randomPhosProtGel +
matrix( runif( NROW(randomPhosProtGel) * NCOL(randomPhosProtGel),
0, 10^(-6)),
nrow(randomPhosProtGel))
# Drop unused levels in individual, biorep, and techrep
metaData_peptide$individual <- droplevels(metaData_peptide$individual)
metaData_peptide$biorep <- droplevels(metaData_peptide$biorep)
metaData_peptide$techrep <- droplevels(metaData_peptide$techrep)
# Per gene limma model
designMatrix <- model.matrix(~ 0 + individual + biorep, data = metaData_peptide )
glsRes <- gls.series_multiple_designs(M = PhosProtGel[ ,ii_peptide ],
cov_matrix = randomPhosProtGel,
design = designMatrix,
ndups = 1,
spacing = 1,
block = NULL,
correlation = NULL)
# Contrast test
designMatrixCov <- model.matrix(~ 0 + individual + biorep + pseudoCov,
data = data.frame(metaData_peptide, pseudoCov = runif(12) ) )
contrastMatrix <- makeContrasts(individualHL18862 - individualHL18486, individualHL19160 - individualHL18862,
individualHL19160 - individualHL18486,
levels = designMatrixCov)
rownames(contrastMatrix) <- colnames(glsRes$coefficients)
fit2 <- contrasts.fit(glsRes, contrastMatrix)
GelPrepBatchCovFit <- eBayes(fit2)
saveRDS( GelPrepBatchCovFit,
file = "~/Dropbox/Brett/diffphos-batch-covariate/GelPrepBatchCovFit.rds")
results_batch_corrected <- decideTests( new("MArrayLM", GelPrepCovFit),
adjust.method = "BH", method = "separate")
colnames(results_gelprep) <- c("18862 - 18486", "19160 - 18862", "19160 - 18486")
results_batch_corrected <- decideTests( new("MArrayLM", GelPrepCovFit),
adjust.method = "BH", method = "separate")
colnames(results_batch_corrected) <- c("18862 - 18486", "19160 - 18862", "19160 - 18486")
results_not_batch_corrected <- decideTests( new("MArrayLM", GelPrepBatchCovFit),
adjust.method = "BH", method = "separate")
colnames(results_not_batch_corrected) <- c("18862 - 18486", "19160 - 18862", "19160 - 18486")
results_batch_corrected <- decideTests( new("MArrayLM", GelPrepCovFit),
adjust.method = "BH", method = "separate")
colnames(results_batch_corrected) <- c("18862 - 18486", "19160 - 18862", "19160 - 18486")
results_not_batch_corrected <- decideTests( new("MArrayLM", GelPrepBatchCovFit),
adjust.method = "BH", method = "separate")
colnames(results_not_batch_corrected) <- c("18862 - 18486", "19160 - 18862", "19160 - 18486")
results_batch_corrected <- decideTests( new("MArrayLM", GelPrepCovFit),
adjust.method = "BH", method = "separate")
results_batch_corrected <- decideTests( new("MArrayLM", GelPrepCovFit),
adjust.method = "BH", method = "separate")
GelPrepCovFit <- readRDS("~/Dropbox/Brett/diffphos-batch-covariate/GelPrepCovFit.rds")
fit_batch_corrected <- readRDS("~/Dropbox/Brett/diffphos-batch-covariate/GelPrepCovFit.rds")
fit_not_batch_corrected <- readRDS("~/Dropbox/Brett/diffphos-batch-covariate/GelPrepBatchCovFit.rds")
results_batch_corrected <- decideTests( new("MArrayLM", fit_batch_corrected),
adjust.method = "BH", method = "separate")
colnames(results_batch_corrected) <- c("18862 - 18486", "19160 - 18862", "19160 - 18486")
results_not_batch_corrected <- decideTests( new("MArrayLM", fit_not_batch_corrected),
adjust.method = "BH", method = "separate")
colnames(results_not_batch_corrected) <- c("18862 - 18486", "19160 - 18862", "19160 - 18486")
hist(fit_batch_corrected$F.p.value, breaks = 30,
xlab = "F-test p-values", ylim = c(0, 2000),
main = "Batch-corrected data")
hist(fit_non_batch_corrected$F.p.value, breaks = 30,
xlab = "F-test p-values", ylim = c(0, 2000),
main = "Not batch-corrected data")
hist(fit_not_batch_corrected$F.p.value, breaks = 30,
xlab = "F-test p-values", ylim = c(0, 2000),
main = "Not batch-corrected data")
hist(fit_batch_corrected$F.p.value, breaks = 30,
xlab = "F-test p-values", ylim = c(0, 1200),
main = "Batch-corrected data")
hist(fit_not_batch_corrected$F.p.value, breaks = 30,
xlab = "F-test p-values", ylim = c(0, 1200),
main = "Not batch-corrected data")
par(mfrow = c(1,2))
hist(fit_batch_corrected$F.p.value, breaks = 30,
xlab = "F-test p-values", ylim = c(0, 1200),
main = "Batch-corrected data")
hist(fit_not_batch_corrected$F.p.value, breaks = 30,
xlab = "F-test p-values", ylim = c(0, 1200),
main = "Not batch-corrected data")
par(mfrow = c(1,2))
hist(fit_batch_corrected$F.p.value, breaks = 30,
xlab = "F-test p-values", ylim = c(0, 1500),
main = "Batch-corrected data")
hist(fit_not_batch_corrected$F.p.value, breaks = 30,
xlab = "F-test p-values", ylim = c(0, 1500),
main = "Not batch-corrected data")
vennDiagram(results_batch_corrected, cex=c(1.2,1,0.7))
vennDiagram(results_not_batch_corrected, cex=c(1.2,1,0.7))
plot(rank(fit_not_batch_corrected$F.p.value),
rank(fit_batch_corrected$F.p.value))
dim(fit_not_batch_corrected)
dim(fit_not_batch_corrected$coefficients)
dim(fit_batch_corrected$coefficients)
head(results_not_batch_corrected)
str(results_not_batch_corrected)
rownames(results_not_batch_corrected)
which( rownames(results_not_batch_corrected) %in%
rownames(results_batch_corrected) )
vennDiagram(results_not_batch_corrected[
which( rownames(results_not_batch_corrected) %in%
rownames(results_batch_corrected) ), ], cex=c(1.2,1,0.7))
vennDiagram(results_batch_corrected, cex=c(1.2,1,0.7))
vennDiagram(results_batch_corrected, cex=c(1.2,1,0.7))
vennDiagram(results_not_batch_corrected[
which( rownames(results_not_batch_corrected) %in%
rownames(results_batch_corrected) ), ], cex=c(1.2,1,0.7))
which_batch_correct <- which( rownames(results_not_batch_corrected) %in%
rownames(results_batch_corrected) )
vennDiagram(results_not_batch_corrected[
which( rownames(results_not_batch_corrected) %in%
rownames(results_batch_corrected) ), ], cex=c(1.2,1,0.7))
c <- rownames(fit_not_batch_corrected)[which_batch_correct]
cbind(c, rownames(fit_batch_corrected))
c <- rownames(fit_not_batch_corrected$coefficients)[which_batch_correct]
cbind(c, rownames(fit_batch_corrected$coefficients))
plot(rank(fit_not_batch_corrected$F.p.value[which_batch_correct]),
rank(fit_batch_corrected$F.p.value))
plot(fit_not_batch_corrected$F.p.value[which_batch_correct],
fit_batch_corrected$F.p.value )
plot(-log10(fit_not_batch_corrected$F.p.value[which_batch_correct]),
-log10(fit_batch_corrected$F.p.value ) )
results_not_batch_corrected
?decideTests
vennDiagram(results_batch_corrected, cex=c(1.2,1,0.7))
which_batch_correct <- which( rownames(results_not_batch_corrected) %in%
rownames(results_batch_corrected) )
foo <- rownames(fit_not_batch_corrected$coefficients)[which_batch_correct]
cbind(c, rownames(fit_batch_corrected$coefficients))
vennDiagram(results_not_batch_corrected[
which( rownames(results_not_batch_corrected) %in%
rownames(results_batch_corrected) ), ], cex=c(1.2,1,0.7))
results_batch_corrected
str(results_batch_corrected)
summary(results_batch_corrected)
summary(results_not_batch_corrected)
summary(results_not_batch_corrected[ which_batch_correct, ])
summary(results_not_batch_corrected[ which_batch_correct, ])
summary(results_not_batch_corrected@.Data[ which_batch_correct, ])
table(results_not_batch_corrected@.Data[ which_batch_correct, ])
results_not_batch_corrected@.Data[ which_batch_correct, ]
results_not_batch_corrected[ which_batch_correct, ]
table(results_not_batch_corrected[ which_batch_correct, ])
table(results_not_batch_corrected[ which_batch_correct, 1])
table(results_not_batch_corrected[ which_batch_correct, 2])
table(results_not_batch_corrected[ which_batch_correct, 3])
tapply(1:3, function(ii_individual) {
table(results_not_batch_corrected[ which_batch_correct, ii_individual])
})
lapply(1:3, function(ii_individual) {
table(results_not_batch_corrected[ which_batch_correct, ii_individual])
})
do.call(cbind, lapply(1:3, function(ii_individual) {
table(results_not_batch_corrected[ which_batch_correct, ii_individual])
}))
summary_not_batch_corrected <- do.call(cbind, lapply(1:3, function(ii_individual) {
table(results_not_batch_corrected[ which_batch_correct, ii_individual])
}))
colnames(results_not_batch_corrected)
colnames(summary_not_batch_corrected) <- colnames(results_not_batch_corrected)
sig_not_batch_corrected <- results_not_batch_corrected
sig_batch_corrected <- results_batch_corrected
sig_not_batch_corrected <- results_not_batch_corrected
sig_batch_corrected <- results_batch_corrected
sig_not_batch_corrected[sig_not_batch_corrected != 0] <- 1
sig_batch_corrected[sig_batch_corrected != 0] <- 1
table(sig_batch_corrected[ ,1],
sig_not_batch_corrected[ ,1] )
table(sig_batch_corrected[ ,1],
sig_not_batch_corrected[ which_batch_correct, 1] )
sig_not_batch_corrected <- results_not_batch_corrected
sig_batch_corrected <- results_batch_corrected[ which_batch_correct, ]
sig_not_batch_corrected <- results_not_batch_corrected[ which_batch_correct, ]
sig_batch_corrected <- results_batch_corrected
sig_not_batch_corrected <- results_not_batch_corrected[ which_batch_correct, ]
sig_batch_corrected <- results_batch_corrected
head( cbind(rownames(sig_not_batch_corrected), rownames(sig_batch_corrected) ))
sig_not_batch_corrected[sig_not_batch_corrected != 0] <- 1
sig_batch_corrected[sig_batch_corrected != 0] <- 1
table(sig_batch_corrected[ ,1],
sig_not_batch_corrected[ which_batch_correct, 1] )
table(sig_batch_corrected[ , 1],
sig_not_batch_corrected[ , 1] )
?table
table(sig_batch_corrected[ , 2],
sig_not_batch_corrected[ , 2] )
table(sig_batch_corrected[ , 3],
sig_not_batch_corrected[ , 3] )
?drop
load("~/Dropbox/GitHub/pluritest/project/code/workspace")
ls()
load("~/Desktop/single-cell-method.RData")
setwd()
getwd()
setwd("Dropbox/GitHub/Humanzee/inst/shiny-apps/cv-and-counts")
require(shinyapps)
runApp()
getwd()
runApp
runApp()
require(shiny)
runApp()
deployApp()
shiny::runApp()
install.packages("BiocStyle")
require(BiocInstaller)
biocLite("BiocStyle")
require(BiocStyle)
b
